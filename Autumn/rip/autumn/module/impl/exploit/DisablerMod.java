package rip.autumn.module.impl.exploit;

import java.util.ArrayDeque;
import java.util.Random;
import me.zane.basicbus.api.annotations.Listener;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C18PacketSpectate;
import rip.autumn.annotations.Label;
import rip.autumn.core.Autumn;
import rip.autumn.events.packet.SendPacketEvent;
import rip.autumn.events.player.MotionUpdateEvent;
import rip.autumn.module.Module;
import rip.autumn.module.ModuleCategory;
import rip.autumn.module.annotations.Category;
import rip.autumn.module.impl.movement.FlightMod;
import rip.autumn.module.impl.movement.LongJumpMod;
import rip.autumn.module.impl.movement.SpeedMod;
import rip.autumn.module.option.Option;
import rip.autumn.module.option.impl.EnumOption;
import rip.autumn.utils.Logger;
import rip.autumn.utils.MathUtils;
import rip.autumn.utils.Stopwatch;

@Label("Disabler")
@Category(ModuleCategory.EXPLOIT)
public final class DisablerMod extends Module {
   private final ArrayDeque packetQueue = new ArrayDeque();
   private final Stopwatch packetStopwatch = new Stopwatch();
   private int i;
   public static final EnumOption mode;

   public DisablerMod() {
      this.setMode(mode);
      this.addOptions(new Option[]{mode});
   }

   public void onEnabled() {
      Logger.log("Please relog for the disabler to take affect.");
      this.i = 0;
   }

   @Listener(MotionUpdateEvent.class)
   public final void onMotionUpdate(MotionUpdateEvent event) {
      if (mode.getValue() == DisablerMod.Mode.GHOSTLY && event.isPre()) {
         mc.getNetHandler().addToSendQueueSilent(new C0CPacketInput());
         mc.getNetHandler().addToSendQueueSilent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
      }

      if (mode.getValue() == DisablerMod.Mode.WATCHDOG && (FlightMod.getInstance().isEnabled() || ((SpeedMod)Autumn.MANAGER_REGISTRY.moduleManager.getModuleOrNull(SpeedMod.class)).isEnabled() || ((LongJumpMod)Autumn.MANAGER_REGISTRY.moduleManager.getModuleOrNull(LongJumpMod.class)).isEnabled() || mc.thePlayer.isSpectator())) {
         PlayerCapabilities playerCapabilities = new PlayerCapabilities();
         playerCapabilities.isFlying = true;
         playerCapabilities.allowFlying = true;
         playerCapabilities.setFlySpeed((float)MathUtils.randomNumber(0.1D, 9.0D));
         mc.getNetHandler().addToSendQueueSilent(new C13PacketPlayerAbilities(playerCapabilities));
      }

   }

   @Listener(SendPacketEvent.class)
   public final void onSendPacket(SendPacketEvent event) {
      if (mode.getValue() == DisablerMod.Mode.WATCHDOG) {
         if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
            mc.getNetHandler().addToSendQueueSilent(new C0FPacketConfirmTransaction(Integer.MAX_VALUE, packetConfirmTransaction.getUid(), false));
            event.setCancelled();
         }

         if (event.getPacket() instanceof C00PacketKeepAlive) {
            mc.getNetHandler().addToSendQueueSilent(new C00PacketKeepAlive(Integer.MIN_VALUE + (new Random()).nextInt(100)));
            event.setCancelled();
         }
      }

      if (mode.getValue() == DisablerMod.Mode.FAITHFUL && mc.thePlayer != null && mc.thePlayer.getDistance(mc.thePlayer.prevPosX, mc.thePlayer.prevPosY, mc.thePlayer.prevPosZ) > 0.6D && event.getPacket() instanceof C03PacketPlayer) {
         if (this.i > 2) {
            mc.getNetHandler().addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.prevPosX + (mc.thePlayer.posX - mc.thePlayer.prevPosX) / 2.0D, mc.thePlayer.prevPosY + (mc.thePlayer.posY - mc.thePlayer.prevPosY) / 2.0D, mc.thePlayer.prevPosZ + (mc.thePlayer.posZ - mc.thePlayer.prevPosZ) / 2.0D, true));
            this.i = 0;
         } else {
            event.setCancelled();
            mc.getNetHandler().addToSendQueueSilent(new C00PacketKeepAlive(Integer.MIN_VALUE));
         }

         ++this.i;
      }

   }

   static {
      mode = new EnumOption("Mode", DisablerMod.Mode.WATCHDOG);
   }

   private static enum Mode {
      WATCHDOG,
      GHOSTLY,
      FAITHFUL;
   }
}
